@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="checkbox-container" style="position: relative; display: inline-block;">
    <input type="checkbox" class="db-checkbox"
           id="@InputId"
           name="@Name"
           checked="@Checked"
           disabled="@Disabled"
           data-custom-id="@CustomId"
           @onchange="OnCheckboxChanged"
           @attributes="AdditionalAttributes" />
</div>

<label for="@InputId" class="@LabelClass" hidden="@LabelHidden">@Label</label>

@code {

    // Diese ID ist nur f√ºr internen Gebrauch und wird automatisch generiert.
    private string CustomId { get;  } = $"custom-{Guid.NewGuid()}";

    [Parameter] public string? InputId { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public bool Checked { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool LabelHidden { get; set; }
    [Parameter] public string LabelClass { get; set; } = "";

    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();

    private async Task OnCheckboxChanged(ChangeEventArgs args)
    {
        if (args.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetIndeterminateState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            await SetIndeterminateState();
        }
    }
    
    private async Task SetIndeterminateState()
    {
        await JSRuntime.InvokeVoidAsync("setCheckboxIndeterminateState", CustomId, Indeterminate);
        
    }

}
