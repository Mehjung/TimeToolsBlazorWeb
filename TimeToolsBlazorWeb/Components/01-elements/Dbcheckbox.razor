@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="checkbox-container" style="position: relative; display: inline-block;">
    <input type="checkbox" class="db-checkbox"
           id="@InputId" name="@Name"
           checked="@Checked" disabled="@Disabled"
           data-custom-id="@CustomId"
           @onchange="HandleChange" />
    <label for="@InputId" class="@LabelClass" LabelHidden="@LabelHidden">@Label</label>
</div>

@code {
    private string CustomId { get;  } = $"custom-{Guid.NewGuid()}";

    [Parameter] public string? InputId { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public bool Checked { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool LabelHidden { get; set; }
    [Parameter] public string LabelClass { get; set; } = "";
    
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetIndeterminateState(Indeterminate);
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await SetIndeterminateState(Indeterminate);
    }

    public async Task SetIndeterminateState(bool value)
    {
        await JSRuntime.InvokeVoidAsync("setCheckboxIndeterminateState", CustomId, value);
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeAsync(value);
            //await SetIndeterminateState(Indeterminate); // Optional, falls sich der Indeterminate-Zustand Ã¤ndern soll
        }
    }
}
