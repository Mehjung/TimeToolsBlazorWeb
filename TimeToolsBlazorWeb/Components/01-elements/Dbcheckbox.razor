@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="checkbox-container" style="position: relative; display: inline-block;">
    <input type="checkbox" class="elm-checkbox" id="@InputId" name="@Name" checked="@Checked" disabled="@Disabled"
        data-custom-id="@CustomId" @onchange="HandleChange" />
    <label @attributes="GetAdditionalAttributes()" class="elm-label" for="@InputId">@Label</label>
</div>

@code {
    private string CustomId { get; } = $"custom-{Guid.NewGuid()}";

    [Parameter] public string? InputId { get; set; } = $"InputID-{Guid.NewGuid()}";
    [Parameter] public string? Name { get; set; }
    [Parameter] public bool Checked { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Autofocus { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? LabelHidden { get; set; }
    [Parameter] public string LabelClass { get; set; } = "";

    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetIndeterminateState(Indeterminate);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetIndeterminateState(Indeterminate);
    }

    public async Task SetIndeterminateState(bool value)
    {
        await JSRuntime.InvokeVoidAsync("setCheckboxIndeterminateState", CustomId, value);
    }

    private async Task HandleChange(ChangeEventArgs e)
    {
        if (e.Value is bool value)
        {
            Checked = value;
            await CheckedChanged.InvokeAsync(value);
            //await SetIndeterminateState(Indeterminate); // Optional, falls sich der Indeterminate-Zustand ändern soll
        }
    }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new Dictionary<string, object>();

    private Dictionary<string, object> GetAdditionalAttributes()
    {
        // Stellen Sie sicher, dass Sie überprüfen, ob LabelHidden null ist, um NullReferenceExceptions zu vermeiden.
        var attributes = new Dictionary<string, object>();

        if (!string.IsNullOrEmpty(LabelHidden))
        {
            attributes.Add("data-label-hidden", LabelHidden);
        }

        return attributes;
    }

    protected override void OnParametersSet()
    {
        if (AdditionalAttributes.TryGetValue("label-hidden", out var value))
        {
            // Speichern Sie den Wert direkt als String
            LabelHidden = value?.ToString();
        }
    }
}
