@using Microsoft.AspNetCore.Components
@using System.Text.Json

<div class="image-container">
    @if (!string.IsNullOrEmpty(ModernFormat))
    {
        <figure>
            <picture>
                <source srcset="@ModernFormat" type="image/@(ModernFormat.Split('.').Last())" />
                <img class="elm-image" src="@Src" alt="@Alt" width="@Width" height="@Height" loading="@Loading" />
            </picture>
            @if (!string.IsNullOrEmpty(Caption))
            {
                <figcaption id="@AriaId">@Caption</figcaption>
            }
        </figure>
    }
    else if (ResponsiveMediaQueries.Any())
    {
<figure>
    <picture>
        @foreach (var query in ResponsiveMediaQueries)
        {
            <source srcset="@query.SrcSet" media="@query.Media" />
        }
        <img class="elm-image" src="@Src" alt="@Alt" width="@Width" height="@Height" loading="@Loading" />
    </picture>
    @if (!string.IsNullOrEmpty(Caption))
    {
        <figcaption id="@AriaId">@Caption</figcaption>
    }
</figure>
    }
    else
    {
        <figure>
            <img class="elm-image" src="@Src" alt="@Alt" width="@Width" height="@Height" loading="@Loading" />
            @if (!string.IsNullOrEmpty(Caption))
            {
                <figcaption id="@AriaId">@Caption</figcaption>
            }
        </figure>
    }
</div>

@code {

    [Parameter] public string Width { get; set; } = "auto";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string? Src { get; set; }
    [Parameter] public string? ModernFormat { get; set; }
    [Parameter] public string? Alt { get; set; }
    [Parameter] public string? Loading { get; set; } = "lazy";
    [Parameter] public string? Caption { get; set; }
    [Parameter] public string? ResponsiveMediaQuery { get; set; }
    [Parameter] public string? SrcSet { get; set; }

    private IEnumerable<ResponsiveMediaQueryItem> ResponsiveMediaQueries => ParseResponsiveMediaQueries();
    private string AriaId { get; set; } = $"image-{Guid.NewGuid()}";

public class ResponsiveMediaQueryItem
{
    public string? SrcSet { get; set; }
    public string? Media { get; set; }
}

private IEnumerable<ResponsiveMediaQueryItem> ParseResponsiveMediaQueries()
{
    if (!string.IsNullOrEmpty(ResponsiveMediaQuery))
    {
        try
        {
            return JsonSerializer.Deserialize<IEnumerable<ResponsiveMediaQueryItem>>(ResponsiveMediaQuery) ?? Enumerable.Empty<ResponsiveMediaQueryItem>();
        }
        catch (JsonException)
        {
            // Fehlerbehandlung
            return Enumerable.Empty<ResponsiveMediaQueryItem>();
        }
    }

    return Enumerable.Empty<ResponsiveMediaQueryItem>();
}

}
